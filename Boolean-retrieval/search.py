#!/usr/bin/python
import json
import sys
import getopt
from preprocess import preprocess
from reverse_polish_notation import compute_rpn

"""
    File name: search.py
    Authors: Svilen Stefanov and Wang Chin-Hao
    Date created: 15/02/2018
    Date last modified: 08/03/2018
    Python Version: 2.7
"""


def usage():
    print "usage: " + sys.argv[0] + " -d dictionary-file -p postings-file -q file-of-queries -o output-file-of-results"

dictionary_file = postings_file = file_of_queries = output_file_of_results = None

try:
    opts, args = getopt.getopt(sys.argv[1:], 'd:p:q:o:')
except getopt.GetoptError, err:
    usage()
    sys.exit(2)

for o, a in opts:
    if o == '-d':
        dictionary_file = a
    elif o == '-p':
        postings_file = a
    elif o == '-q':
        file_of_queries = a
    elif o == '-o':
        file_of_output = a
    else:
        assert False, "unhandled option"

if dictionary_file is None or postings_file is None or file_of_queries is None or file_of_output is None :
    usage()
    sys.exit(2)


def load_dict_file(dict_file):
    with open(dict_file, 'r') as dictionary_f:
        return json.load(dictionary_f)


def main():
    """
    Read the query from the query file, reorder the boolean query for faster computation,
    compute the Reverse Polish Notation generated by the Shunting-yard algorithm
    and write the results to the output file.
    :return: None
    """
    term_dict = load_dict_file(dictionary_file)

    doc_lists = list()
    with open(file_of_queries, 'r') as query_file:
        for line in query_file:
            expr = preprocess(line.replace('\n', ''), term_dict)
            if len(expr):
                doc_ids = compute_rpn(expr, term_dict, postings_file)
                #print "Result: " + ' '.join(str(el) for el in doc_ids) + '\n'
                doc_lists.append(doc_ids)
            else:
                doc_lists.append([])

    with open(file_of_output, 'w') as out:
        out_str = str()
        for l in doc_lists:
            # print l
            out_str += ' '.join(str(el) for el in l) + '\n'
        out.write(out_str)

# main()


def compute_time(reps, func):
    """
    Test the execution speed of the search.
    Ref: https://stackoverflow.com/questions/1593019/is-there-any-simple-way-to-benchmark-python-script
    :param reps: Number of times the function should be executed
    :param func: The function to be executed
    :return: time needed to process all queries (in seconds)
    """
    from time import time
    start = time()
    for i in range(0, reps):
        func()
    end = time()
    return (end - start) / reps


#Used for the execution time test
if __name__ == "__main__":
    print compute_time(1, main)

